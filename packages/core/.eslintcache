[{"/Users/dominikgarciabertapelle/code/js/wizard-state/packages/core/src/WizardProvider.tsx":"1","/Users/dominikgarciabertapelle/code/js/wizard-state/packages/core/src/generateMachine.ts":"2","/Users/dominikgarciabertapelle/code/js/wizard-state/packages/core/src/generateStatesFromSteps.ts":"3","/Users/dominikgarciabertapelle/code/js/wizard-state/packages/core/src/index.ts":"4","/Users/dominikgarciabertapelle/code/js/wizard-state/packages/core/src/types.ts":"5","/Users/dominikgarciabertapelle/code/js/wizard-state/packages/core/test/WizardProvider.test.tsx":"6","/Users/dominikgarciabertapelle/code/js/wizard-state/packages/core/test/generateMachine.test.ts":"7","/Users/dominikgarciabertapelle/code/js/wizard-state/packages/core/test/generateStatesFromSteps.test.tsx":"8","/Users/dominikgarciabertapelle/code/js/wizard-state/packages/core/test/setup.ts":"9","/Users/dominikgarciabertapelle/code/js/wizard-state/packages/core/tsup.config.ts":"10","/Users/dominikgarciabertapelle/code/js/wizard-state/packages/core/vitest.config.ts":"11"},{"size":2136,"mtime":1683080137853,"results":"12","hashOfConfig":"13"},{"size":2774,"mtime":1683079700085,"results":"14","hashOfConfig":"13"},{"size":1036,"mtime":1683079310769,"results":"15","hashOfConfig":"13"},{"size":60,"mtime":1680305159032,"results":"16","hashOfConfig":"13"},{"size":739,"mtime":1683079686577,"results":"17","hashOfConfig":"13"},{"size":4072,"mtime":1683079700085,"results":"18","hashOfConfig":"13"},{"size":3402,"mtime":1683080623978,"results":"19","hashOfConfig":"13"},{"size":2396,"mtime":1683079520196,"results":"20","hashOfConfig":"13"},{"size":289,"mtime":1681953130727,"results":"21","hashOfConfig":"13"},{"size":189,"mtime":1683079700086,"results":"22","hashOfConfig":"13"},{"size":271,"mtime":1683079941879,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ge7fue",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/dominikgarciabertapelle/code/js/wizard-state/packages/core/src/WizardProvider.tsx",[],[],"/Users/dominikgarciabertapelle/code/js/wizard-state/packages/core/src/generateMachine.ts",[],[],"/Users/dominikgarciabertapelle/code/js/wizard-state/packages/core/src/generateStatesFromSteps.ts",[],[],"/Users/dominikgarciabertapelle/code/js/wizard-state/packages/core/src/index.ts",[],[],"/Users/dominikgarciabertapelle/code/js/wizard-state/packages/core/src/types.ts",["58","59"],[],"import { ZodTypeAny, z } from 'zod';\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never];\n\nexport type UnionToIntersectionSchema<U> = (\n  U extends any ? (k: U) => void : never\n) extends (k: infer I) => void\n  ? I\n  : never;\n\nexport type ValuesFromSchemas<\n  TSchemas extends Partial<Record<string, ZodTypeAny>>,\n> = z.infer<\n  // @ts-expect-error zod will correctly infer the type\n  UnionToIntersectionSchema<Exclude<TSchemas[keyof TSchemas], undefined>>\n>;\n\nexport type Step<TStepName extends string> = {\n  name: TStepName;\n};\n\nexport type Steps<TStepName extends string> = [\n  Step<TStepName>,\n  ...Step<TStepName>[],\n];\n\nexport type Event =\n  | {\n      type: 'next';\n      values?: unknown;\n    }\n  | {\n      type: 'back';\n    };\n","/Users/dominikgarciabertapelle/code/js/wizard-state/packages/core/test/WizardProvider.test.tsx",[],[],"/Users/dominikgarciabertapelle/code/js/wizard-state/packages/core/test/generateMachine.test.ts",[],["60","61"],"/Users/dominikgarciabertapelle/code/js/wizard-state/packages/core/test/generateStatesFromSteps.test.tsx",[],[],"/Users/dominikgarciabertapelle/code/js/wizard-state/packages/core/test/setup.ts",[],[],"/Users/dominikgarciabertapelle/code/js/wizard-state/packages/core/tsup.config.ts",[],[],"/Users/dominikgarciabertapelle/code/js/wizard-state/packages/core/vitest.config.ts",[],["62"],{"ruleId":"63","severity":1,"message":"64","line":3,"column":40,"nodeType":"65","messageId":"66","endLine":3,"endColumn":43,"suggestions":"67"},{"ruleId":"63","severity":1,"message":"64","line":6,"column":13,"nodeType":"65","messageId":"66","endLine":6,"endColumn":16,"suggestions":"68"},{"ruleId":"69","severity":2,"message":"70","line":99,"column":11,"nodeType":"71","endLine":99,"endColumn":15,"fix":"72","suppressions":"73"},{"ruleId":"69","severity":2,"message":"74","line":101,"column":11,"nodeType":"71","endLine":101,"endColumn":18,"fix":"75","suppressions":"76"},{"ruleId":"77","severity":2,"message":"78","line":2,"column":30,"nodeType":"79","endLine":2,"endColumn":45,"suppressions":"80"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["81","82"],["83","84"],"sort-keys-fix/sort-keys-fix","Expected object keys to be in ascending order. 'path' should be before 'received'.","Property",{"range":"85","text":"86"},["87"],"Expected object keys to be in ascending order. 'message' should be before 'path'.",{"range":"88","text":"89"},["90"],"import/no-unresolved","Unable to resolve path to module 'vitest/config'.","Literal",["91"],{"messageId":"92","fix":"93","desc":"94"},{"messageId":"95","fix":"96","desc":"97"},{"messageId":"92","fix":"98","desc":"94"},{"messageId":"95","fix":"99","desc":"97"},[2385,2587],"// We disable sort-keys-fix for this test sicne otherwise the values would not match\n// eslint-disable-next-line sort-keys-fix/sort-keys-fix\npath: [],\n          \n          \n          received: 'undefined'",{"kind":"100","justification":"101"},[2418,2684],"\n          \n          // eslint-disable-next-line sort-keys-fix/sort-keys-fix\nmessage: 'Required',\n          \n          // We disable sort-keys-fix for this test sicne otherwise the values would not match\n// eslint-disable-next-line sort-keys-fix/sort-keys-fix\npath: []",{"kind":"100","justification":"101"},{"kind":"100","justification":"101"},"suggestUnknown",{"range":"102","text":"103"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"102","text":"104"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"105","text":"103"},{"range":"105","text":"104"},"directive","",[77,80],"unknown","never",[153,156]]